"""Implementation of statechart model.
Generated by YAKINDU Statechart Tools code generator.
"""

import queue
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

class Model:
	"""Implementation of the state machine Model.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_processes,
			main_region_processes_auto_bot_square_bot,
			main_region_processes_auto_bot_square_bot_r1forward,
			main_region_processes_auto_bot_square_bot_r1turn,
			main_region_processes_auto_bot_manual,
			main_region_processes_auto_bot_manual_movement_movement,
			main_region_processes_orientation_orientation,
			main_region_processes_orientation_orientation_turn_stop_and_turn,
			main_region_processes_orientation_orientation_turn_turn_quick,
			main_region_processes_orientation_orientation_turn_turn_medium,
			main_region_processes_orientation_orientation_turn_turn_slow,
			main_region_processes_orientation_orientation_turn_turn_ready,
			main_region_processes_orientation_orientation_re_align_align,
			main_region_processes_orientation_orientation_re_align_turn_medium,
			main_region_processes_orientation_orientation_re_align_turn_slow,
			main_region_processes_orientation_orientation_re_align_align_ready,
			main_region_processes_orientation_idle,
			main_region_processes_engine_engine,
			main_region_processes_engine_engine_modus_forward_restricted,
			main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped,
			main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up,
			main_region_processes_engine_engine_modus_unrestricted,
			main_region_processes_engine_engine_modus_unrestricted_r1idle,
			main_region_processes_engine_engine_modus_unrestricted_r1stop,
			main_region_processes_engine_engine_modus_unrestricted_r1forward,
			main_region_processes_engine_engine_modus_unrestricted_r1back_up,
			main_region_processes_engine_engine_modus_reverse_restricted,
			main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped,
			main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward,
			main_region_processes_engine_engine_modus_complete_restricted,
			main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped,
			main_region_processes_locomotion_move1step,
			main_region_processes_locomotion_move1step_r1move,
			main_region_processes_locomotion_move1step_r1move_x,
			main_region_processes_locomotion_move1step_r1move_xr1move_west,
			main_region_processes_locomotion_move1step_r1move_xr1move_east,
			main_region_processes_locomotion_move1step_r1move_y,
			main_region_processes_locomotion_move1step_r1move_yr1move_north,
			main_region_processes_locomotion_move1step_r1move_yr1move_south,
			main_region_processes_locomotion_wait_step,
			null_state
		) = range(41)
	
	
	class Move:
		"""Implementation of scope Move.
		"""
		
		def __init__(self, statemachine):
			self.old_x = None
			self.old_y = None
			self.target_pos = None
			self.move_half = None
			
			self.statemachine = statemachine
		
	
	class UserVar:
		"""Implementation of scope UserVar.
		"""
		
		def __init__(self, statemachine):
			self.limit_degree_high = None
			self.limit_degree_low = None
			self.base_speed = None
			self.base_rotation = None
			self.turn_type = None
			self.limit_type = None
			self.xrow = None
			self.ycol = None
			self.xabs = None
			self.yabs = None
			self.abs_dis = None
			self.startprocedure = None
			self.straight_offset = None
			self.aligned = None
			self.ave_off = None
			self.off_back = None
			self.straighten = None
			
			self.statemachine = statemachine
		
	
	class Movement:
		"""Implementation of scope Movement.
		"""
		
		def __init__(self, statemachine):
			self.target_turn = None
			self.range_variable = None
			self.start_negative = None
			self.old_x = None
			self.old_y = None
			
			self.statemachine = statemachine
		
	
	class Orientation:
		"""Implementation of scope Orientation.
		"""
		
		def __init__(self, statemachine):
			self.turning_direction = None
			self.target = None
			self.direction = None
			self.speed = None
			
			self.statemachine = statemachine
		
	
	class BaseValues:
		"""Implementation of scope BaseValues.
		"""
		
		def __init__(self, statemachine):
			self.max_speed = None
			self.max_rotation = None
			self.degrees_front = None
			self.degrees_right = None
			self.degrees_back = None
			self.degrees_left = None
			
			self.statemachine = statemachine
		
	
	class Output:
		"""Implementation of scope Output.
		"""
		
		def __init__(self, statemachine):
			self.speed = None
			self.rotation = None
			self.obstacles = None
			self.gems = None
			self.finish = None
			
			self.statemachine = statemachine
		
	
	class Grid:
		"""Implementation of scope Grid.
		"""
		
		def __init__(self, statemachine):
			self.update = None
			self.receive = None
			self.column = None
			self.row = None
			self.orientation = None
			self.visited = None
			self.wall_front = None
			self.wall_right = None
			self.wall_back = None
			self.wall_left = None
			self.grid_size = None
			self.max_col = None
			self.max_row = None
			
			self.statemachine = statemachine
		
	
	class StartPos:
		"""Implementation of scope StartPos.
		"""
		
		def __init__(self, statemachine):
			self.set_zero = None
			self.zero_x = None
			self.zero_y = None
			self.zero_south_degree = None
			self.laser_deg_offset = None
			
			self.statemachine = statemachine
		
	
	class Computer:
		"""Implementation of scope Computer.
		"""
		
		def __init__(self, statemachine):
			self.m_press = None
			self.w_press = None
			self.a_press = None
			self.s_press = None
			self.d_press = None
			self.x_press = None
			
			self.statemachine = statemachine
		
		def raise_m_press(self):
			"""Raise method for event m_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_m_press_call)
			self.statemachine.run_cycle()
		
		def __raise_m_press_call(self):
			"""Raise callback for event m_press.
			"""
			self.m_press = True
		
		def raise_w_press(self):
			"""Raise method for event w_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_w_press_call)
			self.statemachine.run_cycle()
		
		def __raise_w_press_call(self):
			"""Raise callback for event w_press.
			"""
			self.w_press = True
		
		def raise_a_press(self):
			"""Raise method for event a_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_a_press_call)
			self.statemachine.run_cycle()
		
		def __raise_a_press_call(self):
			"""Raise callback for event a_press.
			"""
			self.a_press = True
		
		def raise_s_press(self):
			"""Raise method for event s_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_s_press_call)
			self.statemachine.run_cycle()
		
		def __raise_s_press_call(self):
			"""Raise callback for event s_press.
			"""
			self.s_press = True
		
		def raise_d_press(self):
			"""Raise method for event d_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_d_press_call)
			self.statemachine.run_cycle()
		
		def __raise_d_press_call(self):
			"""Raise callback for event d_press.
			"""
			self.d_press = True
		
		def raise_x_press(self):
			"""Raise method for event x_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_x_press_call)
			self.statemachine.run_cycle()
		
		def __raise_x_press_call(self):
			"""Raise callback for event x_press.
			"""
			self.x_press = True
		
	
	class Imu:
		"""Implementation of scope Imu.
		"""
		
		def __init__(self, statemachine):
			self.pitch = None
			self.roll = None
			self.yaw = None
			
			self.statemachine = statemachine
		
	
	class Odom:
		"""Implementation of scope Odom.
		"""
		
		def __init__(self, statemachine):
			self.x = None
			self.y = None
			self.z = None
			
			self.statemachine = statemachine
		
	
	class LaserDistance:
		"""Implementation of scope LaserDistance.
		"""
		
		def __init__(self, statemachine):
			self.d0 = None
			self.d90 = None
			self.d180 = None
			self.dm90 = None
			self.dmin = None
			self.min_deg = None
			self.dmax = None
			self.max_deg = None
			self.dmean = None
			self.dfront_min = None
			self.min_deg_f = None
			self.dfront_max = None
			self.max_deg_f = None
			self.dfront_mean = None
			self.dright_min = None
			self.min_deg_r = None
			self.dright_max = None
			self.max_deg_r = None
			self.dright_mean = None
			self.dback_min = None
			self.min_deg_b = None
			self.dback_max = None
			self.max_deg_b = None
			self.dback_mean = None
			self.dleft_min = None
			self.min_deg_l = None
			self.dleft_max = None
			self.max_deg_l = None
			self.dleft_mean = None
			
			self.statemachine = statemachine
		
	
	class LaserIntensity:
		"""Implementation of scope LaserIntensity.
		"""
		
		def __init__(self, statemachine):
			self.i0 = None
			self.i90 = None
			self.i180 = None
			self.im90 = None
			self.ifront_min = None
			self.ifront_max = None
			self.ifront_mean = None
			self.iright_min = None
			self.iright_max = None
			self.iright_mean = None
			self.iback_min = None
			self.iback_max = None
			self.iback_mean = None
			self.ileft_min = None
			self.ileft_max = None
			self.ileft_mean = None
			
			self.statemachine = statemachine
		
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		self.move = Model.Move(self)
		self.user_var = Model.UserVar(self)
		self.movement = Model.Movement(self)
		self.orientation = Model.Orientation(self)
		self.base_values = Model.BaseValues(self)
		self.output = Model.Output(self)
		self.grid = Model.Grid(self)
		self.start_pos = Model.StartPos(self)
		self.computer = Model.Computer(self)
		self.imu = Model.Imu(self)
		self.odom = Model.Odom(self)
		self.laser_distance = Model.LaserDistance(self)
		self.laser_intensity = Model.LaserIntensity(self)
		
		self.__internal_event_queue = queue.Queue()
		self.in_event_queue = queue.Queue()
		self.stop_move = None
		self.end_move = None
		self.go_step = None
		self.turn_start = None
		self.turn_stop = None
		self.collision_frontal = None
		self.orientation_ready = None
		self.orientation_done = None
		self.orientation_slowdown = None
		self.orientation_turn = None
		self.orientation_align = None
		self.engine_start = None
		self.engine_stop = None
		self.engine_reverse = None
		self.engine_unrestricted = None
		self.engine_restrict_all = None
		self.engine_restrict_f = None
		self.engine_restrict_r = None
		
		# enumeration of all states:
		self.__State = Model.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 5
		for __state_index in range(5):
			self.__state_vector[__state_index] = self.State.null_state
		
		# for timed statechart:
		self.timer_service = None
		self.__time_events = [None] * 2
		
		# history vector:
		self.__history_vector = [None] * 1
		for __history_index in range(1):
			self.__history_vector[__history_index] = self.State.null_state
		
		# initializations:
		self.move.old_x = 0.0
		self.move.old_y = 0.0
		self.move.target_pos = 0.47
		self.move.move_half = 0.0
		self.user_var.limit_degree_high = 0.0
		self.user_var.limit_degree_low = 0.0
		self.user_var.base_speed = 0.05
		self.user_var.base_rotation = 0.2
		self.user_var.turn_type = 0
		self.user_var.limit_type = 0
		self.user_var.xrow = 0
		self.user_var.ycol = 0
		self.user_var.xabs = 0
		self.user_var.yabs = 0
		self.user_var.abs_dis = 0
		self.user_var.startprocedure = True
		self.user_var.straight_offset = 0.0
		self.user_var.aligned = False
		self.user_var.ave_off = 0
		self.user_var.off_back = 0
		self.user_var.straighten = False
		self.movement.target_turn = 0
		self.movement.range_variable = 1
		self.movement.start_negative = 1
		self.movement.old_x = 0.0
		self.movement.old_y = 0.0
		self.orientation.turning_direction = 1
		self.orientation.target = -90
		self.orientation.direction = 0
		self.orientation.speed = self.user_var.base_rotation
		self.base_values.max_speed = 0.22
		self.base_values.max_rotation = 2.84
		self.base_values.degrees_front = 10
		self.base_values.degrees_right = 10
		self.base_values.degrees_back = 10
		self.base_values.degrees_left = 10
		self.output.speed = 0.0
		self.output.rotation = 0.0
		self.output.obstacles = 0
		self.output.gems = 0
		self.output.finish = 0
		self.grid.update = False
		self.grid.receive = False
		self.grid.column = 0
		self.grid.row = 0
		self.grid.orientation = 0
		self.grid.visited = False
		self.grid.wall_front = 0
		self.grid.wall_right = 0
		self.grid.wall_back = 0
		self.grid.wall_left = 0
		self.grid.grid_size = 0.51
		self.grid.max_col = 3
		self.grid.max_row = 3
		self.start_pos.set_zero = False
		self.start_pos.zero_x = 0.0
		self.start_pos.zero_y = 0.0
		self.start_pos.zero_south_degree = 0.0
		self.start_pos.laser_deg_offset = 0
		self.imu.pitch = 0.0
		self.imu.roll = 0.0
		self.imu.yaw = 0.0
		self.odom.x = 0.0
		self.odom.y = 0.0
		self.odom.z = 0.0
		self.laser_distance.d0 = 0.0
		self.laser_distance.d90 = 0.0
		self.laser_distance.d180 = 0.0
		self.laser_distance.dm90 = 0.0
		self.laser_distance.dmin = 0.0
		self.laser_distance.min_deg = 0
		self.laser_distance.dmax = 0.0
		self.laser_distance.max_deg = 0
		self.laser_distance.dmean = 0.0
		self.laser_distance.dfront_min = 0.0
		self.laser_distance.min_deg_f = 0
		self.laser_distance.dfront_max = 0.0
		self.laser_distance.max_deg_f = 0
		self.laser_distance.dfront_mean = 0.0
		self.laser_distance.dright_min = 0.0
		self.laser_distance.min_deg_r = 0
		self.laser_distance.dright_max = 0.0
		self.laser_distance.max_deg_r = 0
		self.laser_distance.dright_mean = 0.0
		self.laser_distance.dback_min = 0.0
		self.laser_distance.min_deg_b = 0
		self.laser_distance.dback_max = 0.0
		self.laser_distance.max_deg_b = 0
		self.laser_distance.dback_mean = 0.0
		self.laser_distance.dleft_min = 0.0
		self.laser_distance.min_deg_l = 0
		self.laser_distance.dleft_max = 0.0
		self.laser_distance.max_deg_l = 0
		self.laser_distance.dleft_mean = 0.0
		self.laser_intensity.i0 = 0.0
		self.laser_intensity.i90 = 0.0
		self.laser_intensity.i180 = 0.0
		self.laser_intensity.im90 = 0.0
		self.laser_intensity.ifront_min = 0.0
		self.laser_intensity.ifront_max = 0.0
		self.laser_intensity.ifront_mean = 0.0
		self.laser_intensity.iright_min = 0.0
		self.laser_intensity.iright_max = 0.0
		self.laser_intensity.iright_mean = 0.0
		self.laser_intensity.iback_min = 0.0
		self.laser_intensity.iback_max = 0.0
		self.laser_intensity.iback_mean = 0.0
		self.laser_intensity.ileft_min = 0.0
		self.laser_intensity.ileft_max = 0.0
		self.laser_intensity.ileft_mean = 0.0
		self.__completed = False
		self.__do_completion = False
		self.__is_executing = False
		self.__state_conf_vector_position = None
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state or self.__state_vector[1] is not self.__State.null_state or self.__state_vector[2] is not self.__State.null_state or self.__state_vector[3] is not self.__State.null_state or self.__state_vector[4] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False
			
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_processes:
			return (self.__state_vector[0] >= self.__State.main_region_processes)\
				and (self.__state_vector[0] <= self.__State.main_region_processes_locomotion_wait_step)
		if s == self.__State.main_region_processes_auto_bot_square_bot:
			return (self.__state_vector[0] >= self.__State.main_region_processes_auto_bot_square_bot)\
				and (self.__state_vector[0] <= self.__State.main_region_processes_auto_bot_square_bot_r1turn)
		if s == self.__State.main_region_processes_auto_bot_square_bot_r1forward:
			return self.__state_vector[0] == self.__State.main_region_processes_auto_bot_square_bot_r1forward
		if s == self.__State.main_region_processes_auto_bot_square_bot_r1turn:
			return self.__state_vector[0] == self.__State.main_region_processes_auto_bot_square_bot_r1turn
		if s == self.__State.main_region_processes_auto_bot_manual:
			return (self.__state_vector[0] >= self.__State.main_region_processes_auto_bot_manual)\
				and (self.__state_vector[0] <= self.__State.main_region_processes_auto_bot_manual_movement_movement)
		if s == self.__State.main_region_processes_auto_bot_manual_movement_movement:
			return self.__state_vector[0] == self.__State.main_region_processes_auto_bot_manual_movement_movement
		if s == self.__State.main_region_processes_orientation_orientation:
			return (self.__state_vector[1] >= self.__State.main_region_processes_orientation_orientation)\
				and (self.__state_vector[1] <= self.__State.main_region_processes_orientation_orientation_re_align_align_ready)
		if s == self.__State.main_region_processes_orientation_orientation_turn_stop_and_turn:
			return self.__state_vector[1] == self.__State.main_region_processes_orientation_orientation_turn_stop_and_turn
		if s == self.__State.main_region_processes_orientation_orientation_turn_turn_quick:
			return self.__state_vector[1] == self.__State.main_region_processes_orientation_orientation_turn_turn_quick
		if s == self.__State.main_region_processes_orientation_orientation_turn_turn_medium:
			return self.__state_vector[1] == self.__State.main_region_processes_orientation_orientation_turn_turn_medium
		if s == self.__State.main_region_processes_orientation_orientation_turn_turn_slow:
			return self.__state_vector[1] == self.__State.main_region_processes_orientation_orientation_turn_turn_slow
		if s == self.__State.main_region_processes_orientation_orientation_turn_turn_ready:
			return self.__state_vector[1] == self.__State.main_region_processes_orientation_orientation_turn_turn_ready
		if s == self.__State.main_region_processes_orientation_orientation_re_align_align:
			return self.__state_vector[2] == self.__State.main_region_processes_orientation_orientation_re_align_align
		if s == self.__State.main_region_processes_orientation_orientation_re_align_turn_medium:
			return self.__state_vector[2] == self.__State.main_region_processes_orientation_orientation_re_align_turn_medium
		if s == self.__State.main_region_processes_orientation_orientation_re_align_turn_slow:
			return self.__state_vector[2] == self.__State.main_region_processes_orientation_orientation_re_align_turn_slow
		if s == self.__State.main_region_processes_orientation_orientation_re_align_align_ready:
			return self.__state_vector[2] == self.__State.main_region_processes_orientation_orientation_re_align_align_ready
		if s == self.__State.main_region_processes_orientation_idle:
			return self.__state_vector[1] == self.__State.main_region_processes_orientation_idle
		if s == self.__State.main_region_processes_engine_engine:
			return (self.__state_vector[3] >= self.__State.main_region_processes_engine_engine)\
				and (self.__state_vector[3] <= self.__State.main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped)
		if s == self.__State.main_region_processes_engine_engine_modus_forward_restricted:
			return (self.__state_vector[3] >= self.__State.main_region_processes_engine_engine_modus_forward_restricted)\
				and (self.__state_vector[3] <= self.__State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up)
		if s == self.__State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped:
			return self.__state_vector[3] == self.__State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped
		if s == self.__State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up:
			return self.__state_vector[3] == self.__State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up
		if s == self.__State.main_region_processes_engine_engine_modus_unrestricted:
			return (self.__state_vector[3] >= self.__State.main_region_processes_engine_engine_modus_unrestricted)\
				and (self.__state_vector[3] <= self.__State.main_region_processes_engine_engine_modus_unrestricted_r1back_up)
		if s == self.__State.main_region_processes_engine_engine_modus_unrestricted_r1idle:
			return self.__state_vector[3] == self.__State.main_region_processes_engine_engine_modus_unrestricted_r1idle
		if s == self.__State.main_region_processes_engine_engine_modus_unrestricted_r1stop:
			return self.__state_vector[3] == self.__State.main_region_processes_engine_engine_modus_unrestricted_r1stop
		if s == self.__State.main_region_processes_engine_engine_modus_unrestricted_r1forward:
			return self.__state_vector[3] == self.__State.main_region_processes_engine_engine_modus_unrestricted_r1forward
		if s == self.__State.main_region_processes_engine_engine_modus_unrestricted_r1back_up:
			return self.__state_vector[3] == self.__State.main_region_processes_engine_engine_modus_unrestricted_r1back_up
		if s == self.__State.main_region_processes_engine_engine_modus_reverse_restricted:
			return (self.__state_vector[3] >= self.__State.main_region_processes_engine_engine_modus_reverse_restricted)\
				and (self.__state_vector[3] <= self.__State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward)
		if s == self.__State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped:
			return self.__state_vector[3] == self.__State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped
		if s == self.__State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward:
			return self.__state_vector[3] == self.__State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward
		if s == self.__State.main_region_processes_engine_engine_modus_complete_restricted:
			return (self.__state_vector[3] >= self.__State.main_region_processes_engine_engine_modus_complete_restricted)\
				and (self.__state_vector[3] <= self.__State.main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped)
		if s == self.__State.main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped:
			return self.__state_vector[3] == self.__State.main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped
		if s == self.__State.main_region_processes_locomotion_move1step:
			return (self.__state_vector[4] >= self.__State.main_region_processes_locomotion_move1step)\
				and (self.__state_vector[4] <= self.__State.main_region_processes_locomotion_move1step_r1move_yr1move_south)
		if s == self.__State.main_region_processes_locomotion_move1step_r1move:
			return self.__state_vector[4] == self.__State.main_region_processes_locomotion_move1step_r1move
		if s == self.__State.main_region_processes_locomotion_move1step_r1move_x:
			return (self.__state_vector[4] >= self.__State.main_region_processes_locomotion_move1step_r1move_x)\
				and (self.__state_vector[4] <= self.__State.main_region_processes_locomotion_move1step_r1move_xr1move_east)
		if s == self.__State.main_region_processes_locomotion_move1step_r1move_xr1move_west:
			return self.__state_vector[4] == self.__State.main_region_processes_locomotion_move1step_r1move_xr1move_west
		if s == self.__State.main_region_processes_locomotion_move1step_r1move_xr1move_east:
			return self.__state_vector[4] == self.__State.main_region_processes_locomotion_move1step_r1move_xr1move_east
		if s == self.__State.main_region_processes_locomotion_move1step_r1move_y:
			return (self.__state_vector[4] >= self.__State.main_region_processes_locomotion_move1step_r1move_y)\
				and (self.__state_vector[4] <= self.__State.main_region_processes_locomotion_move1step_r1move_yr1move_south)
		if s == self.__State.main_region_processes_locomotion_move1step_r1move_yr1move_north:
			return self.__state_vector[4] == self.__State.main_region_processes_locomotion_move1step_r1move_yr1move_north
		if s == self.__State.main_region_processes_locomotion_move1step_r1move_yr1move_south:
			return self.__state_vector[4] == self.__State.main_region_processes_locomotion_move1step_r1move_yr1move_south
		if s == self.__State.main_region_processes_locomotion_wait_step:
			return self.__state_vector[4] == self.__State.main_region_processes_locomotion_wait_step
		return False
		
	def time_elapsed(self, event_id):
		"""Add time events to in event queue
		"""
		if event_id in range(2):
			self.in_event_queue.put(lambda: self.raise_time_event(event_id))
			self.run_cycle()
	
	def raise_time_event(self, event_id):
		"""Raise timed events using the event_id.
		"""
		self.__time_events[event_id] = True
	
	def __execute_queued_event(self, func):
		func()
	
	def __get_next_event(self):
		if not self.__internal_event_queue.empty():
			return self.__internal_event_queue.get()
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None
	
	
	def raise_stop_move(self):
		"""Raise method for event stop_move.
		"""
		self.__internal_event_queue.put(self.__raise_stop_move_call)
	
	def __raise_stop_move_call(self):
		"""Raise callback for event stop_move.
		"""
		self.stop_move = True
	
	def raise_end_move(self):
		"""Raise method for event end_move.
		"""
		self.__internal_event_queue.put(self.__raise_end_move_call)
	
	def __raise_end_move_call(self):
		"""Raise callback for event end_move.
		"""
		self.end_move = True
	
	def raise_go_step(self):
		"""Raise method for event go_step.
		"""
		self.__internal_event_queue.put(self.__raise_go_step_call)
	
	def __raise_go_step_call(self):
		"""Raise callback for event go_step.
		"""
		self.go_step = True
	
	def raise_turn_start(self):
		"""Raise method for event turn_start.
		"""
		self.__internal_event_queue.put(self.__raise_turn_start_call)
	
	def __raise_turn_start_call(self):
		"""Raise callback for event turn_start.
		"""
		self.turn_start = True
	
	def raise_turn_stop(self):
		"""Raise method for event turn_stop.
		"""
		self.__internal_event_queue.put(self.__raise_turn_stop_call)
	
	def __raise_turn_stop_call(self):
		"""Raise callback for event turn_stop.
		"""
		self.turn_stop = True
	
	def raise_collision_frontal(self):
		"""Raise method for event collision_frontal.
		"""
		self.__internal_event_queue.put(self.__raise_collision_frontal_call)
	
	def __raise_collision_frontal_call(self):
		"""Raise callback for event collision_frontal.
		"""
		self.collision_frontal = True
	
	def raise_orientation_ready(self):
		"""Raise method for event orientation_ready.
		"""
		self.__internal_event_queue.put(self.__raise_orientation_ready_call)
	
	def __raise_orientation_ready_call(self):
		"""Raise callback for event orientation_ready.
		"""
		self.orientation_ready = True
	
	def raise_orientation_done(self):
		"""Raise method for event orientation_done.
		"""
		self.__internal_event_queue.put(self.__raise_orientation_done_call)
	
	def __raise_orientation_done_call(self):
		"""Raise callback for event orientation_done.
		"""
		self.orientation_done = True
	
	def raise_orientation_slowdown(self):
		"""Raise method for event orientation_slowdown.
		"""
		self.__internal_event_queue.put(self.__raise_orientation_slowdown_call)
	
	def __raise_orientation_slowdown_call(self):
		"""Raise callback for event orientation_slowdown.
		"""
		self.orientation_slowdown = True
	
	def raise_orientation_turn(self):
		"""Raise method for event orientation_turn.
		"""
		self.__internal_event_queue.put(self.__raise_orientation_turn_call)
	
	def __raise_orientation_turn_call(self):
		"""Raise callback for event orientation_turn.
		"""
		self.orientation_turn = True
	
	def raise_orientation_align(self):
		"""Raise method for event orientation_align.
		"""
		self.__internal_event_queue.put(self.__raise_orientation_align_call)
	
	def __raise_orientation_align_call(self):
		"""Raise callback for event orientation_align.
		"""
		self.orientation_align = True
	
	def raise_engine_start(self):
		"""Raise method for event engine_start.
		"""
		self.__internal_event_queue.put(self.__raise_engine_start_call)
	
	def __raise_engine_start_call(self):
		"""Raise callback for event engine_start.
		"""
		self.engine_start = True
	
	def raise_engine_stop(self):
		"""Raise method for event engine_stop.
		"""
		self.__internal_event_queue.put(self.__raise_engine_stop_call)
	
	def __raise_engine_stop_call(self):
		"""Raise callback for event engine_stop.
		"""
		self.engine_stop = True
	
	def raise_engine_reverse(self):
		"""Raise method for event engine_reverse.
		"""
		self.__internal_event_queue.put(self.__raise_engine_reverse_call)
	
	def __raise_engine_reverse_call(self):
		"""Raise callback for event engine_reverse.
		"""
		self.engine_reverse = True
	
	def raise_engine_unrestricted(self):
		"""Raise method for event engine_unrestricted.
		"""
		self.__internal_event_queue.put(self.__raise_engine_unrestricted_call)
	
	def __raise_engine_unrestricted_call(self):
		"""Raise callback for event engine_unrestricted.
		"""
		self.engine_unrestricted = True
	
	def raise_engine_restrict_all(self):
		"""Raise method for event engine_restrict_all.
		"""
		self.__internal_event_queue.put(self.__raise_engine_restrict_all_call)
	
	def __raise_engine_restrict_all_call(self):
		"""Raise callback for event engine_restrict_all.
		"""
		self.engine_restrict_all = True
	
	def raise_engine_restrict_f(self):
		"""Raise method for event engine_restrict_f.
		"""
		self.__internal_event_queue.put(self.__raise_engine_restrict_f_call)
	
	def __raise_engine_restrict_f_call(self):
		"""Raise callback for event engine_restrict_f.
		"""
		self.engine_restrict_f = True
	
	def raise_engine_restrict_r(self):
		"""Raise method for event engine_restrict_r.
		"""
		self.__internal_event_queue.put(self.__raise_engine_restrict_r_call)
	
	def __raise_engine_restrict_r_call(self):
		"""Raise callback for event engine_restrict_r.
		"""
		self.engine_restrict_r = True
	
	def __entry_action_main_region_processes_auto_bot_square_bot_r1_forward(self):
		"""Entry action for state 'Forward'..
		"""
		self.raise_go_step()
		
	def __entry_action_main_region_processes_auto_bot_square_bot_r1_turn(self):
		"""Entry action for state 'Turn'..
		"""
		self.orientation.direction = (((self.orientation.direction + 1)) % 4)
		self.raise_orientation_turn()
		
	def __entry_action_main_region_processes_auto_bot_manual_movement_movement(self):
		"""Entry action for state 'movement'..
		"""
		self.grid.orientation = 0
		
	def __entry_action_main_region_processes_orientation_orientation_turn_stop_and_turn(self):
		""".
		"""
		self.raise_engine_stop()
		if self.orientation.direction == 0:
			self.orientation.target = 0.0
		if self.orientation.direction == 1:
			self.orientation.target = -90
		if self.orientation.direction == 2:
			self.orientation.target = 180
		if self.orientation.direction == 3:
			self.orientation.target = 90
		self.orientation.turning_direction = 1
		self.__completed = True
		
	def __entry_action_main_region_processes_orientation_orientation_turn_turn_quick(self):
		"""Entry action for state 'Turn Quick'..
		"""
		self.output.rotation = (self.user_var.base_rotation * self.orientation.turning_direction)
		
	def __entry_action_main_region_processes_orientation_orientation_turn_turn_medium(self):
		"""Entry action for state 'Turn Medium'..
		"""
		self.output.rotation = (0.1 * self.orientation.turning_direction)
		
	def __entry_action_main_region_processes_orientation_orientation_turn_turn_slow(self):
		"""Entry action for state 'Turn Slow'..
		"""
		self.output.rotation = (0.01 * self.orientation.turning_direction)
		
	def __entry_action_main_region_processes_orientation_orientation_turn_turn_ready(self):
		"""Entry action for state 'Turn Ready'..
		"""
		self.timer_service.set_timer(self, 0, (1 * 1000), False)
		self.output.rotation = 0.0
		self.grid.orientation = self.orientation.direction
		
	def __entry_action_main_region_processes_orientation_orientation_re_align_align(self):
		""".
		"""
		self.orientation.turning_direction = self.orientation.turning_direction * -1
		self.__completed = True
		
	def __entry_action_main_region_processes_orientation_orientation_re_align_turn_medium(self):
		"""Entry action for state 'Turn Medium'..
		"""
		self.output.rotation = (0.1 * self.orientation.turning_direction)
		
	def __entry_action_main_region_processes_orientation_orientation_re_align_turn_slow(self):
		"""Entry action for state 'Turn Slow'..
		"""
		self.output.rotation = (0.01 * self.orientation.turning_direction)
		
	def __entry_action_main_region_processes_orientation_orientation_re_align_align_ready(self):
		"""Entry action for state 'Align Ready'..
		"""
		self.timer_service.set_timer(self, 1, (1 * 1000), False)
		self.output.rotation = 0.0
		
	def __entry_action_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped(self):
		"""Entry action for state 'Stopped'..
		"""
		self.output.speed = 0.0
		
	def __entry_action_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up(self):
		"""Entry action for state 'Back Up'..
		"""
		self.output.speed = (-1 * self.user_var.base_speed)
		
	def __entry_action_main_region_processes_engine_engine_modus_unrestricted_r1_stop(self):
		""".
		"""
		self.output.speed = 0.0
		self.__completed = True
		
	def __entry_action_main_region_processes_engine_engine_modus_unrestricted_r1_forward(self):
		"""Entry action for state 'Forward'..
		"""
		self.output.speed = self.user_var.base_speed
		
	def __entry_action_main_region_processes_engine_engine_modus_unrestricted_r1_back_up(self):
		"""Entry action for state 'Back Up'..
		"""
		self.output.speed = (-1 * self.user_var.base_speed)
		
	def __entry_action_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped(self):
		"""Entry action for state 'Stopped'..
		"""
		self.output.speed = 0.0
		
	def __entry_action_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward(self):
		"""Entry action for state 'Forward'..
		"""
		self.output.speed = self.user_var.base_speed
		
	def __entry_action_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped(self):
		"""Entry action for state 'Stopped'..
		"""
		self.output.speed = 0.0
		
	def __entry_action_main_region_processes_locomotion_move1step_r1_move_x(self):
		"""Entry action for state 'moveX'..
		"""
		self.move.old_x = self.odom.x
		self.move.move_half = 0.24 if self.odom.x >= 0 else -0.24
		
	def __entry_action_main_region_processes_locomotion_move1step_r1_move_x_r1_move_west(self):
		"""Entry action for state 'moveWest'..
		"""
		self.move.target_pos = (((((float(((int(((((self.odom.x + self.move.move_half)) / 0.48)))))))) - 1.0)) * 0.48)
		self.raise_engine_start()
		
	def __entry_action_main_region_processes_locomotion_move1step_r1_move_x_r1_move_east(self):
		"""Entry action for state 'moveEast'..
		"""
		self.move.target_pos = (((((float(((int(((((self.odom.x + self.move.move_half)) / 0.48)))))))) + 1.0)) * 0.48)
		self.raise_engine_start()
		
	def __entry_action_main_region_processes_locomotion_move1step_r1_move_y(self):
		"""Entry action for state 'moveY'..
		"""
		self.move.old_y = self.odom.y
		self.move.move_half = 0.24 if self.odom.y >= 0 else -0.24
		
	def __entry_action_main_region_processes_locomotion_move1step_r1_move_y_r1_move_north(self):
		"""Entry action for state 'moveNorth'..
		"""
		self.move.target_pos = (((((float(((int(((((self.odom.y + self.move.move_half)) / 0.48)))))))) + 1.0)) * 0.48)
		self.raise_engine_start()
		
	def __entry_action_main_region_processes_locomotion_move1step_r1_move_y_r1_move_south(self):
		"""Entry action for state 'moveSouth'..
		"""
		self.move.target_pos = (((((float(((int(((((self.odom.y + self.move.move_half)) / 0.48)))))))) - 1.0)) * 0.48)
		self.raise_engine_start()
		
	def __exit_action_main_region_processes_orientation_orientation_turn_stop_and_turn(self):
		"""Exit action for state 'stop and turn'..
		"""
		if self.grid.orientation == 0 and self.orientation.direction == 1:
			self.orientation.turning_direction = -1
		if self.grid.orientation == 1 and self.orientation.direction == 2:
			self.orientation.turning_direction = -1
			self.orientation.target = self.orientation.target * -1
		if self.grid.orientation == 2 and self.orientation.direction == 3:
			self.orientation.turning_direction = -1
		if self.grid.orientation == 3 and self.orientation.direction == 0:
			self.orientation.turning_direction = -1
		
	def __exit_action_main_region_processes_orientation_orientation_turn_turn_ready(self):
		"""Exit action for state 'Turn Ready'..
		"""
		self.timer_service.unset_timer(self, 0)
		
	def __exit_action_main_region_processes_orientation_orientation_re_align_align_ready(self):
		"""Exit action for state 'Align Ready'..
		"""
		self.timer_service.unset_timer(self, 1)
		
	def __exit_action_main_region_processes_locomotion_move1step_r1_move_x_r1_move_west(self):
		"""Exit action for state 'moveWest'..
		"""
		self.raise_engine_stop()
		
	def __exit_action_main_region_processes_locomotion_move1step_r1_move_x_r1_move_east(self):
		"""Exit action for state 'moveEast'..
		"""
		self.raise_engine_stop()
		
	def __exit_action_main_region_processes_locomotion_move1step_r1_move_y_r1_move_north(self):
		"""Exit action for state 'moveNorth'..
		"""
		self.raise_engine_stop()
		
	def __exit_action_main_region_processes_locomotion_move1step_r1_move_y_r1_move_south(self):
		"""Exit action for state 'moveSouth'..
		"""
		self.raise_engine_stop()
		
	def __enter_sequence_main_region_processes_default(self):
		"""'default' enter sequence for state Processes.
		"""
		self.__enter_sequence_main_region_processes_auto_bot_default()
		self.__enter_sequence_main_region_processes_orientation_default()
		self.__enter_sequence_main_region_processes_engine_default()
		self.__enter_sequence_main_region_processes_locomotion_default()
		
	def __enter_sequence_main_region_processes_auto_bot_square_bot_default(self):
		"""'default' enter sequence for state SquareBot.
		"""
		self.__enter_sequence_main_region_processes_auto_bot_square_bot_r1_default()
		
	def __enter_sequence_main_region_processes_auto_bot_square_bot_r1_forward_default(self):
		"""'default' enter sequence for state Forward.
		"""
		self.__entry_action_main_region_processes_auto_bot_square_bot_r1_forward()
		self.__state_vector[0] = self.State.main_region_processes_auto_bot_square_bot_r1forward
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_auto_bot_square_bot_r1_turn_default(self):
		"""'default' enter sequence for state Turn.
		"""
		self.__entry_action_main_region_processes_auto_bot_square_bot_r1_turn()
		self.__state_vector[0] = self.State.main_region_processes_auto_bot_square_bot_r1turn
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_auto_bot_manual_default(self):
		"""'default' enter sequence for state Manual.
		"""
		self.__enter_sequence_main_region_processes_auto_bot_manual_movement_default()
		
	def __enter_sequence_main_region_processes_auto_bot_manual_movement_movement_default(self):
		"""'default' enter sequence for state movement.
		"""
		self.__entry_action_main_region_processes_auto_bot_manual_movement_movement()
		self.__state_vector[0] = self.State.main_region_processes_auto_bot_manual_movement_movement
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_orientation_orientation_turn_stop_and_turn_default(self):
		"""'default' enter sequence for state stop and turn.
		"""
		self.__entry_action_main_region_processes_orientation_orientation_turn_stop_and_turn()
		self.__state_vector[1] = self.State.main_region_processes_orientation_orientation_turn_stop_and_turn
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_orientation_orientation_turn_turn_medium_default(self):
		"""'default' enter sequence for state Turn Medium.
		"""
		self.__entry_action_main_region_processes_orientation_orientation_turn_turn_medium()
		self.__state_vector[1] = self.State.main_region_processes_orientation_orientation_turn_turn_medium
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_orientation_orientation_turn_turn_slow_default(self):
		"""'default' enter sequence for state Turn Slow.
		"""
		self.__entry_action_main_region_processes_orientation_orientation_turn_turn_slow()
		self.__state_vector[1] = self.State.main_region_processes_orientation_orientation_turn_turn_slow
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_orientation_orientation_turn_turn_ready_default(self):
		"""'default' enter sequence for state Turn Ready.
		"""
		self.__entry_action_main_region_processes_orientation_orientation_turn_turn_ready()
		self.__state_vector[1] = self.State.main_region_processes_orientation_orientation_turn_turn_ready
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_orientation_orientation_re_align_align_default(self):
		"""'default' enter sequence for state Align.
		"""
		self.__entry_action_main_region_processes_orientation_orientation_re_align_align()
		self.__state_vector[2] = self.State.main_region_processes_orientation_orientation_re_align_align
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_orientation_orientation_re_align_turn_slow_default(self):
		"""'default' enter sequence for state Turn Slow.
		"""
		self.__entry_action_main_region_processes_orientation_orientation_re_align_turn_slow()
		self.__state_vector[2] = self.State.main_region_processes_orientation_orientation_re_align_turn_slow
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_orientation_orientation_re_align_align_ready_default(self):
		"""'default' enter sequence for state Align Ready.
		"""
		self.__entry_action_main_region_processes_orientation_orientation_re_align_align_ready()
		self.__state_vector[2] = self.State.main_region_processes_orientation_orientation_re_align_align_ready
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_orientation_idle_default(self):
		"""'default' enter sequence for state Idle.
		"""
		self.__state_vector[1] = self.State.main_region_processes_orientation_idle
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_engine_engine_default(self):
		"""'default' enter sequence for state Engine.
		"""
		self.__enter_sequence_main_region_processes_engine_engine_modus_default()
		
	def __enter_sequence_main_region_processes_engine_engine_modus_forward_restricted_default(self):
		"""'default' enter sequence for state Forward Restricted.
		"""
		self.__enter_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_default()
		self.__history_vector[0] = self.__state_vector[3]
		
	def __enter_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped_default(self):
		"""'default' enter sequence for state Stopped.
		"""
		self.__entry_action_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped()
		self.__state_vector[3] = self.State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up_default(self):
		"""'default' enter sequence for state Back Up.
		"""
		self.__entry_action_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up()
		self.__state_vector[3] = self.State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_engine_engine_modus_unrestricted_default(self):
		"""'default' enter sequence for state Unrestricted.
		"""
		self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_default()
		self.__history_vector[0] = self.__state_vector[3]
		
	def __enter_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_idle_default(self):
		"""'default' enter sequence for state Idle.
		"""
		self.__state_vector[3] = self.State.main_region_processes_engine_engine_modus_unrestricted_r1idle
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_stop_default(self):
		"""'default' enter sequence for state Stop.
		"""
		self.__entry_action_main_region_processes_engine_engine_modus_unrestricted_r1_stop()
		self.__state_vector[3] = self.State.main_region_processes_engine_engine_modus_unrestricted_r1stop
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_forward_default(self):
		"""'default' enter sequence for state Forward.
		"""
		self.__entry_action_main_region_processes_engine_engine_modus_unrestricted_r1_forward()
		self.__state_vector[3] = self.State.main_region_processes_engine_engine_modus_unrestricted_r1forward
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_back_up_default(self):
		"""'default' enter sequence for state Back Up.
		"""
		self.__entry_action_main_region_processes_engine_engine_modus_unrestricted_r1_back_up()
		self.__state_vector[3] = self.State.main_region_processes_engine_engine_modus_unrestricted_r1back_up
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_engine_engine_modus_reverse_restricted_default(self):
		"""'default' enter sequence for state Reverse Restricted.
		"""
		self.__enter_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_default()
		self.__history_vector[0] = self.__state_vector[3]
		
	def __enter_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped_default(self):
		"""'default' enter sequence for state Stopped.
		"""
		self.__entry_action_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped()
		self.__state_vector[3] = self.State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward_default(self):
		"""'default' enter sequence for state Forward.
		"""
		self.__entry_action_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward()
		self.__state_vector[3] = self.State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_engine_engine_modus_complete_restricted_default(self):
		"""'default' enter sequence for state Complete Restricted.
		"""
		self.__enter_sequence_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_default()
		self.__history_vector[0] = self.__state_vector[3]
		
	def __enter_sequence_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped_default(self):
		"""'default' enter sequence for state Stopped.
		"""
		self.__entry_action_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped()
		self.__state_vector[3] = self.State.main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_locomotion_move1step_default(self):
		"""'default' enter sequence for state move1step.
		"""
		self.__enter_sequence_main_region_processes_locomotion_move1step_r1_default()
		
	def __enter_sequence_main_region_processes_locomotion_move1step_r1_move_default(self):
		"""'default' enter sequence for state move.
		"""
		self.__state_vector[4] = self.State.main_region_processes_locomotion_move1step_r1move
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_locomotion_move1step_r1_move_x_r1_move_west_default(self):
		"""'default' enter sequence for state moveWest.
		"""
		self.__entry_action_main_region_processes_locomotion_move1step_r1_move_x_r1_move_west()
		self.__state_vector[4] = self.State.main_region_processes_locomotion_move1step_r1move_xr1move_west
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_locomotion_move1step_r1_move_x_r1_move_east_default(self):
		"""'default' enter sequence for state moveEast.
		"""
		self.__entry_action_main_region_processes_locomotion_move1step_r1_move_x_r1_move_east()
		self.__state_vector[4] = self.State.main_region_processes_locomotion_move1step_r1move_xr1move_east
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_locomotion_move1step_r1_move_y_r1_move_north_default(self):
		"""'default' enter sequence for state moveNorth.
		"""
		self.__entry_action_main_region_processes_locomotion_move1step_r1_move_y_r1_move_north()
		self.__state_vector[4] = self.State.main_region_processes_locomotion_move1step_r1move_yr1move_north
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_locomotion_move1step_r1_move_y_r1_move_south_default(self):
		"""'default' enter sequence for state moveSouth.
		"""
		self.__entry_action_main_region_processes_locomotion_move1step_r1_move_y_r1_move_south()
		self.__state_vector[4] = self.State.main_region_processes_locomotion_move1step_r1move_yr1move_south
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_processes_locomotion_wait_step_default(self):
		"""'default' enter sequence for state waitStep.
		"""
		self.__state_vector[4] = self.State.main_region_processes_locomotion_wait_step
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main region.
		"""
		self.__react_main_region__entry_default()
		
	def __enter_sequence_main_region_processes_auto_bot_default(self):
		"""'default' enter sequence for region AutoBot.
		"""
		self.__react_main_region_processes_auto_bot__entry_default()
		
	def __enter_sequence_main_region_processes_auto_bot_square_bot_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		self.__react_main_region_processes_auto_bot_square_bot_r1__entry_default()
		
	def __enter_sequence_main_region_processes_auto_bot_manual_movement_default(self):
		"""'default' enter sequence for region movement.
		"""
		self.__react_main_region_processes_auto_bot_manual_movement__entry_default()
		
	def __enter_sequence_main_region_processes_orientation_default(self):
		"""'default' enter sequence for region Orientation.
		"""
		self.__react_main_region_processes_orientation__entry_default()
		
	def __enter_sequence_main_region_processes_engine_default(self):
		"""'default' enter sequence for region Engine.
		"""
		self.__react_main_region_processes_engine__entry_default()
		
	def __enter_sequence_main_region_processes_engine_engine_modus_default(self):
		"""'default' enter sequence for region Modus.
		"""
		self.__react_main_region_processes_engine_engine_modus__entry_default()
		
	def __shallow_enter_sequence_main_region_processes_engine_engine_modus(self):
		"""shallow enterSequence with history in child Modus.
		"""
		state = self.__history_vector[0]
		if state == self.State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped:
			self.__enter_sequence_main_region_processes_engine_engine_modus_forward_restricted_default()
		elif state == self.State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up:
			self.__enter_sequence_main_region_processes_engine_engine_modus_forward_restricted_default()
		elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1idle:
			self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_default()
		elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1stop:
			self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_default()
		elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1forward:
			self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_default()
		elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1back_up:
			self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_default()
		elif state == self.State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped:
			self.__enter_sequence_main_region_processes_engine_engine_modus_reverse_restricted_default()
		elif state == self.State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward:
			self.__enter_sequence_main_region_processes_engine_engine_modus_reverse_restricted_default()
		elif state == self.State.main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped:
			self.__enter_sequence_main_region_processes_engine_engine_modus_complete_restricted_default()
		
	def __enter_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_default(self):
		"""'default' enter sequence for region Forward Interrupted.
		"""
		self.__react_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted__entry_default()
		
	def __enter_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		self.__react_main_region_processes_engine_engine_modus_unrestricted_r1__entry_default()
		
	def __enter_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_default(self):
		"""'default' enter sequence for region Backward Interrupted.
		"""
		self.__react_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted__entry_default()
		
	def __enter_sequence_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_default(self):
		"""'default' enter sequence for region All Interrupted.
		"""
		self.__react_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted__entry_default()
		
	def __enter_sequence_main_region_processes_locomotion_default(self):
		"""'default' enter sequence for region Locomotion.
		"""
		self.__react_main_region_processes_locomotion__entry_default()
		
	def __enter_sequence_main_region_processes_locomotion_move1step_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		self.__react_main_region_processes_locomotion_move1step_r1__entry_default()
		
	def __exit_sequence_main_region_processes_auto_bot_square_bot(self):
		"""Default exit sequence for state SquareBot.
		"""
		self.__exit_sequence_main_region_processes_auto_bot_square_bot_r1()
		
	def __exit_sequence_main_region_processes_auto_bot_square_bot_r1_forward(self):
		"""Default exit sequence for state Forward.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_processes_auto_bot_square_bot_r1_turn(self):
		"""Default exit sequence for state Turn.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_processes_auto_bot_manual(self):
		"""Default exit sequence for state Manual.
		"""
		self.__exit_sequence_main_region_processes_auto_bot_manual_movement()
		
	def __exit_sequence_main_region_processes_auto_bot_manual_movement_movement(self):
		"""Default exit sequence for state movement.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_processes_orientation_orientation(self):
		"""Default exit sequence for state Orientation.
		"""
		self.__exit_sequence_main_region_processes_orientation_orientation_turn()
		self.__exit_sequence_main_region_processes_orientation_orientation_re_align()
		
	def __exit_sequence_main_region_processes_orientation_orientation_turn_stop_and_turn(self):
		"""Default exit sequence for state stop and turn.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_main_region_processes_orientation_orientation_turn_stop_and_turn()
		
	def __exit_sequence_main_region_processes_orientation_orientation_turn_turn_quick(self):
		"""Default exit sequence for state Turn Quick.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_processes_orientation_orientation_turn_turn_medium(self):
		"""Default exit sequence for state Turn Medium.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_processes_orientation_orientation_turn_turn_slow(self):
		"""Default exit sequence for state Turn Slow.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_processes_orientation_orientation_turn_turn_ready(self):
		"""Default exit sequence for state Turn Ready.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_main_region_processes_orientation_orientation_turn_turn_ready()
		
	def __exit_sequence_main_region_processes_orientation_orientation_re_align_align(self):
		"""Default exit sequence for state Align.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_processes_orientation_orientation_re_align_turn_medium(self):
		"""Default exit sequence for state Turn Medium.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_processes_orientation_orientation_re_align_turn_slow(self):
		"""Default exit sequence for state Turn Slow.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_processes_orientation_orientation_re_align_align_ready(self):
		"""Default exit sequence for state Align Ready.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2
		self.__exit_action_main_region_processes_orientation_orientation_re_align_align_ready()
		
	def __exit_sequence_main_region_processes_orientation_idle(self):
		"""Default exit sequence for state Idle.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_processes_engine_engine_modus_forward_restricted(self):
		"""Default exit sequence for state Forward Restricted.
		"""
		self.__exit_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted()
		
	def __exit_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped(self):
		"""Default exit sequence for state Stopped.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up(self):
		"""Default exit sequence for state Back Up.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_processes_engine_engine_modus_unrestricted(self):
		"""Default exit sequence for state Unrestricted.
		"""
		self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1()
		
	def __exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_idle(self):
		"""Default exit sequence for state Idle.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_stop(self):
		"""Default exit sequence for state Stop.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_forward(self):
		"""Default exit sequence for state Forward.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_back_up(self):
		"""Default exit sequence for state Back Up.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_processes_engine_engine_modus_reverse_restricted(self):
		"""Default exit sequence for state Reverse Restricted.
		"""
		self.__exit_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted()
		
	def __exit_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped(self):
		"""Default exit sequence for state Stopped.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward(self):
		"""Default exit sequence for state Forward.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_processes_engine_engine_modus_complete_restricted(self):
		"""Default exit sequence for state Complete Restricted.
		"""
		self.__exit_sequence_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted()
		
	def __exit_sequence_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped(self):
		"""Default exit sequence for state Stopped.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_processes_locomotion_move1step(self):
		"""Default exit sequence for state move1step.
		"""
		self.__exit_sequence_main_region_processes_locomotion_move1step_r1()
		
	def __exit_sequence_main_region_processes_locomotion_move1step_r1_move(self):
		"""Default exit sequence for state move.
		"""
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4
		
	def __exit_sequence_main_region_processes_locomotion_move1step_r1_move_x_r1_move_west(self):
		"""Default exit sequence for state moveWest.
		"""
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4
		self.__exit_action_main_region_processes_locomotion_move1step_r1_move_x_r1_move_west()
		
	def __exit_sequence_main_region_processes_locomotion_move1step_r1_move_x_r1_move_east(self):
		"""Default exit sequence for state moveEast.
		"""
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4
		self.__exit_action_main_region_processes_locomotion_move1step_r1_move_x_r1_move_east()
		
	def __exit_sequence_main_region_processes_locomotion_move1step_r1_move_y_r1_move_north(self):
		"""Default exit sequence for state moveNorth.
		"""
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4
		self.__exit_action_main_region_processes_locomotion_move1step_r1_move_y_r1_move_north()
		
	def __exit_sequence_main_region_processes_locomotion_move1step_r1_move_y_r1_move_south(self):
		"""Default exit sequence for state moveSouth.
		"""
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4
		self.__exit_action_main_region_processes_locomotion_move1step_r1_move_y_r1_move_south()
		
	def __exit_sequence_main_region_processes_locomotion_wait_step(self):
		"""Default exit sequence for state waitStep.
		"""
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4
		
	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main region.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_processes_auto_bot_square_bot_r1forward:
			self.__exit_sequence_main_region_processes_auto_bot_square_bot_r1_forward()
		elif state == self.State.main_region_processes_auto_bot_square_bot_r1turn:
			self.__exit_sequence_main_region_processes_auto_bot_square_bot_r1_turn()
		elif state == self.State.main_region_processes_auto_bot_manual_movement_movement:
			self.__exit_sequence_main_region_processes_auto_bot_manual_movement_movement()
		state = self.__state_vector[1]
		if state == self.State.main_region_processes_orientation_orientation_turn_stop_and_turn:
			self.__exit_sequence_main_region_processes_orientation_orientation_turn_stop_and_turn()
		elif state == self.State.main_region_processes_orientation_orientation_turn_turn_quick:
			self.__exit_sequence_main_region_processes_orientation_orientation_turn_turn_quick()
		elif state == self.State.main_region_processes_orientation_orientation_turn_turn_medium:
			self.__exit_sequence_main_region_processes_orientation_orientation_turn_turn_medium()
		elif state == self.State.main_region_processes_orientation_orientation_turn_turn_slow:
			self.__exit_sequence_main_region_processes_orientation_orientation_turn_turn_slow()
		elif state == self.State.main_region_processes_orientation_orientation_turn_turn_ready:
			self.__exit_sequence_main_region_processes_orientation_orientation_turn_turn_ready()
		elif state == self.State.main_region_processes_orientation_idle:
			self.__exit_sequence_main_region_processes_orientation_idle()
		state = self.__state_vector[2]
		if state == self.State.main_region_processes_orientation_orientation_re_align_align:
			self.__exit_sequence_main_region_processes_orientation_orientation_re_align_align()
		elif state == self.State.main_region_processes_orientation_orientation_re_align_turn_medium:
			self.__exit_sequence_main_region_processes_orientation_orientation_re_align_turn_medium()
		elif state == self.State.main_region_processes_orientation_orientation_re_align_turn_slow:
			self.__exit_sequence_main_region_processes_orientation_orientation_re_align_turn_slow()
		elif state == self.State.main_region_processes_orientation_orientation_re_align_align_ready:
			self.__exit_sequence_main_region_processes_orientation_orientation_re_align_align_ready()
		state = self.__state_vector[3]
		if state == self.State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped:
			self.__exit_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped()
		elif state == self.State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up:
			self.__exit_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up()
		elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1idle:
			self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_idle()
		elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1stop:
			self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_stop()
		elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1forward:
			self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_forward()
		elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1back_up:
			self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_back_up()
		elif state == self.State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped:
			self.__exit_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped()
		elif state == self.State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward:
			self.__exit_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward()
		elif state == self.State.main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped:
			self.__exit_sequence_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped()
		state = self.__state_vector[4]
		if state == self.State.main_region_processes_locomotion_move1step_r1move:
			self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move()
		elif state == self.State.main_region_processes_locomotion_move1step_r1move_xr1move_west:
			self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move_x_r1_move_west()
		elif state == self.State.main_region_processes_locomotion_move1step_r1move_xr1move_east:
			self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move_x_r1_move_east()
		elif state == self.State.main_region_processes_locomotion_move1step_r1move_yr1move_north:
			self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move_y_r1_move_north()
		elif state == self.State.main_region_processes_locomotion_move1step_r1move_yr1move_south:
			self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move_y_r1_move_south()
		elif state == self.State.main_region_processes_locomotion_wait_step:
			self.__exit_sequence_main_region_processes_locomotion_wait_step()
		
	def __exit_sequence_main_region_processes_auto_bot_square_bot_r1(self):
		"""Default exit sequence for region r1.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_processes_auto_bot_square_bot_r1forward:
			self.__exit_sequence_main_region_processes_auto_bot_square_bot_r1_forward()
		elif state == self.State.main_region_processes_auto_bot_square_bot_r1turn:
			self.__exit_sequence_main_region_processes_auto_bot_square_bot_r1_turn()
		
	def __exit_sequence_main_region_processes_auto_bot_manual_movement(self):
		"""Default exit sequence for region movement.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_processes_auto_bot_manual_movement_movement:
			self.__exit_sequence_main_region_processes_auto_bot_manual_movement_movement()
		
	def __exit_sequence_main_region_processes_orientation_orientation_turn(self):
		"""Default exit sequence for region Turn.
		"""
		state = self.__state_vector[1]
		if state == self.State.main_region_processes_orientation_orientation_turn_stop_and_turn:
			self.__exit_sequence_main_region_processes_orientation_orientation_turn_stop_and_turn()
		elif state == self.State.main_region_processes_orientation_orientation_turn_turn_quick:
			self.__exit_sequence_main_region_processes_orientation_orientation_turn_turn_quick()
		elif state == self.State.main_region_processes_orientation_orientation_turn_turn_medium:
			self.__exit_sequence_main_region_processes_orientation_orientation_turn_turn_medium()
		elif state == self.State.main_region_processes_orientation_orientation_turn_turn_slow:
			self.__exit_sequence_main_region_processes_orientation_orientation_turn_turn_slow()
		elif state == self.State.main_region_processes_orientation_orientation_turn_turn_ready:
			self.__exit_sequence_main_region_processes_orientation_orientation_turn_turn_ready()
		
	def __exit_sequence_main_region_processes_orientation_orientation_re_align(self):
		"""Default exit sequence for region Re-Align.
		"""
		state = self.__state_vector[2]
		if state == self.State.main_region_processes_orientation_orientation_re_align_align:
			self.__exit_sequence_main_region_processes_orientation_orientation_re_align_align()
		elif state == self.State.main_region_processes_orientation_orientation_re_align_turn_medium:
			self.__exit_sequence_main_region_processes_orientation_orientation_re_align_turn_medium()
		elif state == self.State.main_region_processes_orientation_orientation_re_align_turn_slow:
			self.__exit_sequence_main_region_processes_orientation_orientation_re_align_turn_slow()
		elif state == self.State.main_region_processes_orientation_orientation_re_align_align_ready:
			self.__exit_sequence_main_region_processes_orientation_orientation_re_align_align_ready()
		
	def __exit_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted(self):
		"""Default exit sequence for region Forward Interrupted.
		"""
		state = self.__state_vector[3]
		if state == self.State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped:
			self.__exit_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped()
		elif state == self.State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up:
			self.__exit_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up()
		
	def __exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1(self):
		"""Default exit sequence for region r1.
		"""
		state = self.__state_vector[3]
		if state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1idle:
			self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_idle()
		elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1stop:
			self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_stop()
		elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1forward:
			self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_forward()
		elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1back_up:
			self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_back_up()
		
	def __exit_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted(self):
		"""Default exit sequence for region Backward Interrupted.
		"""
		state = self.__state_vector[3]
		if state == self.State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped:
			self.__exit_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped()
		elif state == self.State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward:
			self.__exit_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward()
		
	def __exit_sequence_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted(self):
		"""Default exit sequence for region All Interrupted.
		"""
		state = self.__state_vector[3]
		if state == self.State.main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped:
			self.__exit_sequence_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped()
		
	def __exit_sequence_main_region_processes_locomotion_move1step_r1(self):
		"""Default exit sequence for region r1.
		"""
		state = self.__state_vector[4]
		if state == self.State.main_region_processes_locomotion_move1step_r1move:
			self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move()
		elif state == self.State.main_region_processes_locomotion_move1step_r1move_xr1move_west:
			self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move_x_r1_move_west()
		elif state == self.State.main_region_processes_locomotion_move1step_r1move_xr1move_east:
			self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move_x_r1_move_east()
		elif state == self.State.main_region_processes_locomotion_move1step_r1move_yr1move_north:
			self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move_y_r1_move_north()
		elif state == self.State.main_region_processes_locomotion_move1step_r1move_yr1move_south:
			self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move_y_r1_move_south()
		
	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_processes_default()
		
	def __react_main_region_processes_auto_bot_square_bot_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_processes_auto_bot_square_bot_r1_forward_default()
		
	def __react_main_region_processes_auto_bot__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_processes_auto_bot_manual_default()
		
	def __react_main_region_processes_auto_bot_manual_movement__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_processes_auto_bot_manual_movement_movement_default()
		
	def __react_main_region_processes_orientation__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_processes_orientation_idle_default()
		
	def __react_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped_default()
		
	def __react_main_region_processes_engine_engine_modus_unrestricted_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_idle_default()
		
	def __react_main_region_processes_engine_engine_modus__entry_default(self):
		"""Default react sequence for shallow history entry .
		"""
		#Enter the region with shallow history
		if self.__history_vector[0] is not self.State.null_state:
			self.__shallow_enter_sequence_main_region_processes_engine_engine_modus()
		else:
			self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_default()
		
	def __react_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped_default()
		
	def __react_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped_default()
		
	def __react_main_region_processes_engine__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_processes_engine_engine_default()
		
	def __react_main_region_processes_locomotion_move1step_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_processes_locomotion_move1step_r1_move_default()
		
	def __react_main_region_processes_locomotion__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_processes_locomotion_wait_step_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		return transitioned_before
	
	
	def __main_region_processes_react(self, transitioned_before):
		"""Implementation of __main_region_processes_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_auto_bot_square_bot_react(self, transitioned_before):
		"""Implementation of __main_region_processes_auto_bot_square_bot_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.computer.m_press:
					self.__exit_sequence_main_region_processes_auto_bot_square_bot()
					self.__enter_sequence_main_region_processes_auto_bot_manual_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_processes_auto_bot_square_bot_r1_forward_react(self, transitioned_before):
		"""Implementation of __main_region_processes_auto_bot_square_bot_r1_forward_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.end_move:
					self.__exit_sequence_main_region_processes_auto_bot_square_bot_r1_forward()
					self.__enter_sequence_main_region_processes_auto_bot_square_bot_r1_turn_default()
					self.__main_region_processes_auto_bot_square_bot_react(0)
					transitioned_after = 0
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_auto_bot_square_bot_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_auto_bot_square_bot_r1_turn_react(self, transitioned_before):
		"""Implementation of __main_region_processes_auto_bot_square_bot_r1_turn_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.orientation_done:
					self.__exit_sequence_main_region_processes_auto_bot_square_bot_r1_turn()
					self.__enter_sequence_main_region_processes_auto_bot_square_bot_r1_forward_default()
					self.__main_region_processes_auto_bot_square_bot_react(0)
					transitioned_after = 0
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_auto_bot_square_bot_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_auto_bot_manual_react(self, transitioned_before):
		"""Implementation of __main_region_processes_auto_bot_manual_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.computer.m_press:
					self.__exit_sequence_main_region_processes_auto_bot_manual()
					self.__enter_sequence_main_region_processes_auto_bot_square_bot_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_processes_auto_bot_manual_movement_movement_react(self, transitioned_before):
		"""Implementation of __main_region_processes_auto_bot_manual_movement_movement_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				if self.computer.w_press:
					self.output.speed = self.output.speed + self.user_var.base_speed
				if self.computer.s_press:
					self.output.speed = 0.0
				if self.computer.a_press:
					self.output.rotation = self.output.rotation + self.user_var.base_rotation
				if self.computer.d_press:
					self.output.rotation = self.output.rotation - self.user_var.base_rotation
				if self.computer.x_press:
					self.raise_orientation_align()
				if self.output.rotation > 0:
					self.orientation.turning_direction = 1
				if self.output.rotation < 0:
					self.orientation.turning_direction = -1
				transitioned_after = self.__main_region_processes_auto_bot_manual_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_orientation_orientation_react(self, transitioned_before):
		"""Implementation of __main_region_processes_orientation_orientation_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if self.orientation_done:
					self.__exit_sequence_main_region_processes_orientation_orientation()
					self.__enter_sequence_main_region_processes_orientation_idle_default()
					transitioned_after = 2
		return transitioned_after
	
	
	def __main_region_processes_orientation_orientation_turn_stop_and_turn_react(self, transitioned_before):
		"""Implementation of __main_region_processes_orientation_orientation_turn_stop_and_turn_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[1] = self.State.null_state
			self.__state_conf_vector_position = 1
			self.__exit_action_main_region_processes_orientation_orientation_turn_stop_and_turn()
			self.__entry_action_main_region_processes_orientation_orientation_turn_turn_quick()
			self.__state_vector[1] = self.State.main_region_processes_orientation_orientation_turn_turn_quick
			self.__state_conf_vector_position = 1
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __main_region_processes_orientation_orientation_turn_turn_quick_react(self, transitioned_before):
		"""Implementation of __main_region_processes_orientation_orientation_turn_turn_quick_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if self.orientation_slowdown:
					self.__exit_sequence_main_region_processes_orientation_orientation_turn_turn_quick()
					self.__enter_sequence_main_region_processes_orientation_orientation_turn_turn_medium_default()
					transitioned_after = 1
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				if (self.orientation.target - self.imu.yaw) > -15 and (self.orientation.target - self.imu.yaw) < 15:
					self.raise_orientation_slowdown()
		return transitioned_after
	
	
	def __main_region_processes_orientation_orientation_turn_turn_medium_react(self, transitioned_before):
		"""Implementation of __main_region_processes_orientation_orientation_turn_turn_medium_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if self.orientation_slowdown:
					self.__exit_sequence_main_region_processes_orientation_orientation_turn_turn_medium()
					self.__enter_sequence_main_region_processes_orientation_orientation_turn_turn_slow_default()
					transitioned_after = 1
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				if (self.orientation.target - self.imu.yaw) > -5 and (self.orientation.target - self.imu.yaw) < 5:
					self.raise_orientation_slowdown()
		return transitioned_after
	
	
	def __main_region_processes_orientation_orientation_turn_turn_slow_react(self, transitioned_before):
		"""Implementation of __main_region_processes_orientation_orientation_turn_turn_slow_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if self.orientation_ready:
					self.__exit_sequence_main_region_processes_orientation_orientation_turn_turn_slow()
					self.__enter_sequence_main_region_processes_orientation_orientation_turn_turn_ready_default()
					transitioned_after = 1
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				if (self.orientation.target - self.imu.yaw) > -2 and (self.orientation.target - self.imu.yaw) < 2:
					self.raise_orientation_ready()
		return transitioned_after
	
	
	def __main_region_processes_orientation_orientation_turn_turn_ready_react(self, transitioned_before):
		"""Implementation of __main_region_processes_orientation_orientation_turn_turn_ready_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if self.__time_events[0]:
					self.__exit_sequence_main_region_processes_orientation_orientation()
					self.raise_orientation_done()
					self.__time_events[0] = False
					self.__enter_sequence_main_region_processes_orientation_idle_default()
					transitioned_after = 1
		return transitioned_after
	
	
	def __main_region_processes_orientation_orientation_re_align_align_react(self, transitioned_before):
		"""Implementation of __main_region_processes_orientation_orientation_re_align_align_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[2] = self.State.null_state
			self.__state_conf_vector_position = 2
			self.__entry_action_main_region_processes_orientation_orientation_re_align_turn_medium()
			self.__state_vector[2] = self.State.main_region_processes_orientation_orientation_re_align_turn_medium
			self.__state_conf_vector_position = 2
			self.__state_conf_vector_changed = True
			self.__main_region_processes_orientation_orientation_react(1)
		else:
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_orientation_orientation_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_orientation_orientation_re_align_turn_medium_react(self, transitioned_before):
		"""Implementation of __main_region_processes_orientation_orientation_re_align_turn_medium_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 2:
				if self.orientation_slowdown:
					self.__exit_sequence_main_region_processes_orientation_orientation_re_align_turn_medium()
					self.__enter_sequence_main_region_processes_orientation_orientation_re_align_turn_slow_default()
					self.__main_region_processes_orientation_orientation_react(1)
					transitioned_after = 2
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				if (self.orientation.target - self.imu.yaw) > -5 and (self.orientation.target - self.imu.yaw) < 5:
					self.raise_orientation_slowdown()
				transitioned_after = self.__main_region_processes_orientation_orientation_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_orientation_orientation_re_align_turn_slow_react(self, transitioned_before):
		"""Implementation of __main_region_processes_orientation_orientation_re_align_turn_slow_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 2:
				if self.orientation_ready:
					self.__exit_sequence_main_region_processes_orientation_orientation_re_align_turn_slow()
					self.__enter_sequence_main_region_processes_orientation_orientation_re_align_align_ready_default()
					self.__main_region_processes_orientation_orientation_react(1)
					transitioned_after = 2
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				if (self.orientation.target - self.imu.yaw) > -2 and (self.orientation.target - self.imu.yaw) < 2:
					self.raise_orientation_ready()
				transitioned_after = self.__main_region_processes_orientation_orientation_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_orientation_orientation_re_align_align_ready_react(self, transitioned_before):
		"""Implementation of __main_region_processes_orientation_orientation_re_align_align_ready_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				if self.__time_events[1]:
					self.raise_orientation_done()
				transitioned_after = self.__main_region_processes_orientation_orientation_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_orientation_idle_react(self, transitioned_before):
		"""Implementation of __main_region_processes_orientation_idle_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if self.orientation_turn:
					self.__exit_sequence_main_region_processes_orientation_idle()
					self.__enter_sequence_main_region_processes_orientation_orientation_turn_stop_and_turn_default()
					transitioned_after = 1
				elif self.orientation_align:
					self.__exit_sequence_main_region_processes_orientation_idle()
					self.__enter_sequence_main_region_processes_orientation_orientation_re_align_align_default()
					transitioned_after = 1
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_react function.
		"""
		transitioned_after = transitioned_before
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_forward_restricted_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_forward_restricted_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.engine_unrestricted:
					self.__exit_sequence_main_region_processes_engine_engine_modus_forward_restricted()
					self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_default()
					self.__main_region_processes_engine_engine_react(3)
					transitioned_after = 3
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.engine_reverse:
					self.__exit_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped()
					self.__enter_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up_default()
					self.__main_region_processes_engine_engine_modus_forward_restricted_react(3)
					transitioned_after = 3
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_modus_forward_restricted_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.engine_stop:
					self.__exit_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up()
					self.__enter_sequence_main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped_default()
					self.__main_region_processes_engine_engine_modus_forward_restricted_react(3)
					transitioned_after = 3
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_modus_forward_restricted_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_unrestricted_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_unrestricted_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.engine_restrict_f:
					self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted()
					self.__enter_sequence_main_region_processes_engine_engine_modus_forward_restricted_default()
					self.__main_region_processes_engine_engine_react(3)
					transitioned_after = 3
				elif self.engine_restrict_r:
					self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted()
					self.__enter_sequence_main_region_processes_engine_engine_modus_reverse_restricted_default()
					self.__main_region_processes_engine_engine_react(3)
					transitioned_after = 3
				elif self.engine_restrict_all:
					self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted()
					self.__enter_sequence_main_region_processes_engine_engine_modus_complete_restricted_default()
					self.__main_region_processes_engine_engine_react(3)
					transitioned_after = 3
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_unrestricted_r1_idle_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_unrestricted_r1_idle_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.engine_start:
					self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_idle()
					self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_forward_default()
					self.__main_region_processes_engine_engine_modus_unrestricted_react(3)
					transitioned_after = 3
				elif self.engine_reverse:
					self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_idle()
					self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_back_up_default()
					self.__main_region_processes_engine_engine_modus_unrestricted_react(3)
					transitioned_after = 3
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_modus_unrestricted_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_unrestricted_r1_stop_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_unrestricted_r1_stop_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[3] = self.State.null_state
			self.__state_conf_vector_position = 3
			self.__state_vector[3] = self.State.main_region_processes_engine_engine_modus_unrestricted_r1idle
			self.__state_conf_vector_position = 3
			self.__state_conf_vector_changed = True
			self.__main_region_processes_engine_engine_modus_unrestricted_react(3)
		else:
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_modus_unrestricted_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_unrestricted_r1_forward_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_unrestricted_r1_forward_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.engine_stop:
					self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_forward()
					self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_stop_default()
					self.__main_region_processes_engine_engine_modus_unrestricted_react(3)
					transitioned_after = 3
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_modus_unrestricted_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_unrestricted_r1_back_up_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_unrestricted_r1_back_up_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.engine_stop:
					self.__exit_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_back_up()
					self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_r1_stop_default()
					self.__main_region_processes_engine_engine_modus_unrestricted_react(3)
					transitioned_after = 3
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_modus_unrestricted_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_reverse_restricted_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_reverse_restricted_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.engine_unrestricted:
					self.__exit_sequence_main_region_processes_engine_engine_modus_reverse_restricted()
					self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_default()
					self.__main_region_processes_engine_engine_react(3)
					transitioned_after = 3
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.engine_start:
					self.__exit_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped()
					self.__enter_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward_default()
					self.__main_region_processes_engine_engine_modus_reverse_restricted_react(3)
					transitioned_after = 3
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_modus_reverse_restricted_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.engine_stop:
					self.__exit_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward()
					self.__enter_sequence_main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped_default()
					self.__main_region_processes_engine_engine_modus_reverse_restricted_react(3)
					transitioned_after = 3
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_modus_reverse_restricted_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_complete_restricted_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_complete_restricted_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.engine_unrestricted:
					self.__exit_sequence_main_region_processes_engine_engine_modus_complete_restricted()
					self.__enter_sequence_main_region_processes_engine_engine_modus_unrestricted_default()
					self.__main_region_processes_engine_engine_react(3)
					transitioned_after = 3
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped_react(self, transitioned_before):
		"""Implementation of __main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_engine_engine_modus_complete_restricted_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_locomotion_move1step_react(self, transitioned_before):
		"""Implementation of __main_region_processes_locomotion_move1step_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 4:
				if self.end_move:
					self.__exit_sequence_main_region_processes_locomotion_move1step()
					self.__enter_sequence_main_region_processes_locomotion_wait_step_default()
					self.__main_region_processes_react(0)
					transitioned_after = 4
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_locomotion_move1step_r1_move_react(self, transitioned_before):
		"""Implementation of __main_region_processes_locomotion_move1step_r1_move_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 4:
				if self.grid.orientation == 0:
					self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move()
					self.__entry_action_main_region_processes_locomotion_move1step_r1_move_x()
					self.__enter_sequence_main_region_processes_locomotion_move1step_r1_move_x_r1_move_east_default()
					self.__main_region_processes_locomotion_move1step_react(4)
					transitioned_after = 4
				elif self.grid.orientation == 3:
					self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move()
					self.__entry_action_main_region_processes_locomotion_move1step_r1_move_y()
					self.__enter_sequence_main_region_processes_locomotion_move1step_r1_move_y_r1_move_north_default()
					self.__main_region_processes_locomotion_move1step_react(4)
					transitioned_after = 4
				elif self.grid.orientation == 2:
					self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move()
					self.__entry_action_main_region_processes_locomotion_move1step_r1_move_x()
					self.__enter_sequence_main_region_processes_locomotion_move1step_r1_move_x_r1_move_west_default()
					self.__main_region_processes_locomotion_move1step_react(4)
					transitioned_after = 4
				elif self.grid.orientation == 1:
					self.__exit_sequence_main_region_processes_locomotion_move1step_r1_move()
					self.__entry_action_main_region_processes_locomotion_move1step_r1_move_y()
					self.__enter_sequence_main_region_processes_locomotion_move1step_r1_move_y_r1_move_south_default()
					self.__main_region_processes_locomotion_move1step_react(4)
					transitioned_after = 4
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_locomotion_move1step_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_locomotion_move1step_r1_move_x_react(self, transitioned_before):
		"""Implementation of __main_region_processes_locomotion_move1step_r1_move_x_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_locomotion_move1step_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_locomotion_move1step_r1_move_x_r1_move_west_react(self, transitioned_before):
		"""Implementation of __main_region_processes_locomotion_move1step_r1_move_x_r1_move_west_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				if self.odom.x <= self.move.target_pos:
					self.raise_end_move()
				transitioned_after = self.__main_region_processes_locomotion_move1step_r1_move_x_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_locomotion_move1step_r1_move_x_r1_move_east_react(self, transitioned_before):
		"""Implementation of __main_region_processes_locomotion_move1step_r1_move_x_r1_move_east_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				if self.odom.x >= self.move.target_pos:
					self.raise_end_move()
				transitioned_after = self.__main_region_processes_locomotion_move1step_r1_move_x_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_locomotion_move1step_r1_move_y_react(self, transitioned_before):
		"""Implementation of __main_region_processes_locomotion_move1step_r1_move_y_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_locomotion_move1step_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_locomotion_move1step_r1_move_y_r1_move_north_react(self, transitioned_before):
		"""Implementation of __main_region_processes_locomotion_move1step_r1_move_y_r1_move_north_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				if self.odom.y >= self.move.target_pos:
					self.raise_end_move()
				transitioned_after = self.__main_region_processes_locomotion_move1step_r1_move_y_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_locomotion_move1step_r1_move_y_r1_move_south_react(self, transitioned_before):
		"""Implementation of __main_region_processes_locomotion_move1step_r1_move_y_r1_move_south_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				if self.odom.y <= self.move.target_pos:
					self.raise_end_move()
				transitioned_after = self.__main_region_processes_locomotion_move1step_r1_move_y_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_processes_locomotion_wait_step_react(self, transitioned_before):
		"""Implementation of __main_region_processes_locomotion_wait_step_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 4:
				if self.go_step:
					self.__exit_sequence_main_region_processes_locomotion_wait_step()
					self.__enter_sequence_main_region_processes_locomotion_move1step_default()
					self.__main_region_processes_react(0)
					transitioned_after = 4
			#If no transition was taken then execute local reactions
			if transitioned_after == transitioned_before:
				transitioned_after = self.__main_region_processes_react(transitioned_before)
		return transitioned_after
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.computer.m_press = False
		self.computer.w_press = False
		self.computer.a_press = False
		self.computer.s_press = False
		self.computer.d_press = False
		self.computer.x_press = False
		self.__time_events[0] = False
		self.__time_events[1] = False
	
	
	def __clear_internal_events(self):
		"""Implementation of __clear_internal_events function.
		"""
		self.stop_move = False
		self.end_move = False
		self.go_step = False
		self.turn_start = False
		self.turn_stop = False
		self.collision_frontal = False
		self.orientation_ready = False
		self.orientation_done = False
		self.orientation_slowdown = False
		self.orientation_turn = False
		self.orientation_align = False
		self.engine_start = False
		self.engine_stop = False
		self.engine_reverse = False
		self.engine_unrestricted = False
		self.engine_restrict_all = False
		self.engine_restrict_f = False
		self.engine_restrict_r = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		transitioned = -1
		self.__state_conf_vector_position = 0
		state = self.__state_vector[0]
		if state == self.State.main_region_processes_auto_bot_square_bot_r1forward:
			transitioned = self.__main_region_processes_auto_bot_square_bot_r1_forward_react(transitioned)
		elif state == self.State.main_region_processes_auto_bot_square_bot_r1turn:
			transitioned = self.__main_region_processes_auto_bot_square_bot_r1_turn_react(transitioned)
		elif state == self.State.main_region_processes_auto_bot_manual_movement_movement:
			transitioned = self.__main_region_processes_auto_bot_manual_movement_movement_react(transitioned)
		if self.__state_conf_vector_position < 1:
			state = self.__state_vector[1]
			if state == self.State.main_region_processes_orientation_orientation_turn_stop_and_turn:
				transitioned = self.__main_region_processes_orientation_orientation_turn_stop_and_turn_react(transitioned)
			elif state == self.State.main_region_processes_orientation_orientation_turn_turn_quick:
				transitioned = self.__main_region_processes_orientation_orientation_turn_turn_quick_react(transitioned)
			elif state == self.State.main_region_processes_orientation_orientation_turn_turn_medium:
				transitioned = self.__main_region_processes_orientation_orientation_turn_turn_medium_react(transitioned)
			elif state == self.State.main_region_processes_orientation_orientation_turn_turn_slow:
				transitioned = self.__main_region_processes_orientation_orientation_turn_turn_slow_react(transitioned)
			elif state == self.State.main_region_processes_orientation_orientation_turn_turn_ready:
				transitioned = self.__main_region_processes_orientation_orientation_turn_turn_ready_react(transitioned)
			elif state == self.State.main_region_processes_orientation_idle:
				transitioned = self.__main_region_processes_orientation_idle_react(transitioned)
		if self.__state_conf_vector_position < 2:
			state = self.__state_vector[2]
			if state == self.State.main_region_processes_orientation_orientation_re_align_align:
				transitioned = self.__main_region_processes_orientation_orientation_re_align_align_react(transitioned)
			elif state == self.State.main_region_processes_orientation_orientation_re_align_turn_medium:
				transitioned = self.__main_region_processes_orientation_orientation_re_align_turn_medium_react(transitioned)
			elif state == self.State.main_region_processes_orientation_orientation_re_align_turn_slow:
				transitioned = self.__main_region_processes_orientation_orientation_re_align_turn_slow_react(transitioned)
			elif state == self.State.main_region_processes_orientation_orientation_re_align_align_ready:
				transitioned = self.__main_region_processes_orientation_orientation_re_align_align_ready_react(transitioned)
		if self.__state_conf_vector_position < 3:
			state = self.__state_vector[3]
			if state == self.State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped:
				transitioned = self.__main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_stopped_react(transitioned)
			elif state == self.State.main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up:
				transitioned = self.__main_region_processes_engine_engine_modus_forward_restricted_forward_interrupted_back_up_react(transitioned)
			elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1idle:
				transitioned = self.__main_region_processes_engine_engine_modus_unrestricted_r1_idle_react(transitioned)
			elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1stop:
				transitioned = self.__main_region_processes_engine_engine_modus_unrestricted_r1_stop_react(transitioned)
			elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1forward:
				transitioned = self.__main_region_processes_engine_engine_modus_unrestricted_r1_forward_react(transitioned)
			elif state == self.State.main_region_processes_engine_engine_modus_unrestricted_r1back_up:
				transitioned = self.__main_region_processes_engine_engine_modus_unrestricted_r1_back_up_react(transitioned)
			elif state == self.State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped:
				transitioned = self.__main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_stopped_react(transitioned)
			elif state == self.State.main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward:
				transitioned = self.__main_region_processes_engine_engine_modus_reverse_restricted_backward_interrupted_forward_react(transitioned)
			elif state == self.State.main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped:
				transitioned = self.__main_region_processes_engine_engine_modus_complete_restricted_all_interrupted_stopped_react(transitioned)
		if self.__state_conf_vector_position < 4:
			state = self.__state_vector[4]
			if state == self.State.main_region_processes_locomotion_move1step_r1move:
				self.__main_region_processes_locomotion_move1step_r1_move_react(transitioned)
			elif state == self.State.main_region_processes_locomotion_move1step_r1move_xr1move_west:
				self.__main_region_processes_locomotion_move1step_r1_move_x_r1_move_west_react(transitioned)
			elif state == self.State.main_region_processes_locomotion_move1step_r1move_xr1move_east:
				self.__main_region_processes_locomotion_move1step_r1_move_x_r1_move_east_react(transitioned)
			elif state == self.State.main_region_processes_locomotion_move1step_r1move_yr1move_north:
				self.__main_region_processes_locomotion_move1step_r1_move_y_r1_move_north_react(transitioned)
			elif state == self.State.main_region_processes_locomotion_move1step_r1move_yr1move_south:
				self.__main_region_processes_locomotion_move1step_r1_move_y_r1_move_south_react(transitioned)
			elif state == self.State.main_region_processes_locomotion_wait_step:
				self.__main_region_processes_locomotion_wait_step_react(transitioned)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__do_completion = False
			condition_1 = True
			while condition_1:
				if self.__completed:
					self.__do_completion = True
				self.__completed = False
				self.__micro_step()
				self.__do_completion = False
				condition_1 = self.__completed
			self.__clear_in_events()
			self.__clear_internal_events()
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
			condition_0 = self.computer.m_press or self.computer.w_press or self.computer.a_press or self.computer.s_press or self.computer.d_press or self.computer.x_press or self.stop_move or self.end_move or self.go_step or self.turn_start or self.turn_stop or self.collision_frontal or self.orientation_ready or self.orientation_done or self.orientation_slowdown or self.orientation_turn or self.orientation_align or self.engine_start or self.engine_stop or self.engine_reverse or self.engine_unrestricted or self.engine_restrict_all or self.engine_restrict_f or self.engine_restrict_r or self.__time_events[0] or self.__time_events[1]
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__enter_sequence_main_region_default()
		self.__do_completion = False
		condition_0 = True
		while condition_0:
			if self.__completed:
				self.__do_completion = True
			self.__completed = False
			self.__micro_step()
			self.__do_completion = False
			condition_0 = self.__completed
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__exit_sequence_main_region()
		self.__is_executing = False
	
	
	def trigger_without_event(self):
		"""Implementation of triggerWithoutEvent function.
		"""
		self.run_cycle()
	
